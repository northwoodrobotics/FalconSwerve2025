package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.can.TalonFX;  // Import TalonFX motor controller
import com.ctre.phoenix.motorcontrol.ControlMode;  // For controlling the motor
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

public class Elevator extends SubsystemBase {
    private final TalonFX elevatorMotor;  // Using TalonFX motor controller
    private final PIDController pidController;
    private final Joystick joystick;

    // Setpoints for the PID controller
    private final double setPointA = 1000.0;  // Example setpoint 1
    private final double setPointB = 2000.0;  // Example setpoint 2
    private final double setPointX = 3000.0;  // Example setpoint 3

    // Current setpoint
    private double currentSetPoint = setPointA;

    public Elevator(Joystick joystick) {
        elevatorMotor = new TalonFX(1);  // Initialize TalonFX on CAN ID 1, adjust according to your setup
        this.joystick = joystick;

        // Initialize the PID controller (Proportional, Integral, Derivative constants)
        pidController = new PIDController(0.1, 0.0, 0.0);
        pidController.setSetpoint(currentSetPoint);
        pidController.setTolerance(10.0);  // Allowable error for the PID controller (can be adjusted)

        // Optionally, reset the motor's encoder to a known starting position
        elevatorMotor.configFactoryDefault();
    }

    @Override
    public void periodic() {
        // Read joystick button states to switch between setpoints
        if (joystick.getRawButtonPressed(1)) { // Button A
            setSetPoint(setPointA);
        }
        if (joystick.getRawButtonPressed(2)) { // Button B
            setSetPoint(setPointB);
        }
        if (joystick.getRawButtonPressed(3)) { // Button X
            setSetPoint(setPointX);
        }

        // Get the current motor position from the encoder
        double currentPosition = elevatorMotor.getSelectedSensorPosition();

        // Get the PID output based on the current position
        double output = pidController.calculate(currentPosition);

        // Apply the PID output to the motor
        motor.set(ControlMode.PercentOutput, output); // Control motor speed using PID output
    }

    // Update the current setpoint and reset the PID controller to use the new setpoint
    private void setSetPoint(double setPoint) {
        currentSetPoint = setPoint;
        pidController.setSetpoint(setPoint);
    }

    // Optionally, you can add a method to reset the encoder to zero if needed
    public void resetEncoder() {
        elevatorMotor.setSelectedSensorPosition(0); // Reset encoder position to 0
    }
}
